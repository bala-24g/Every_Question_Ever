class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        str1=word1
        str2=word2
        dp=[[0]*(len(str2)+1) for _ in range(len(str1)+1)]

        for i in range(len(str1)+1):
            dp[i][0]=i
        for j in range(len(str2)+1):
            dp[0][j]=j
        
        for i in range(1,len(str1)+1):
            for j in range(1,len(str2)+1):
                if str1[i-1]==str2[j-1]:
                    dp[i][j]=dp[i-1][j-1]
                else:
                    dp[i][j]=1+min(dp[i-1][j-1],min(dp[i-1][j],dp[i][j-1]))
        return dp[-1][-1]
            
#Similar to subsequences, but the dp condition is different and base cases are a bit different.
#Here you need to find minimum insertions/deletions/replacements to make one string into another.